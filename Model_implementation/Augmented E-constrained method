include("Todos_dados.jl")

#-------------------------------------------------------------------------------
w=1
include("modelo.jl")
z1min=value(z1)
w=0
include("modelo_fixo_z1.jl")
z1min=value(z1)
z2max=value(z2)
#-------------------------------------------------------------------------------
w=0
include("modelo.jl")
z2min=value(z2)
w=1
include("modelo_fixo_z2.jl")
z1max=value(z1)
z2min=value(z2)
#--------------------------------------------------
function E_restrito(epsilon)
    #modelo = Model(Gurobi.Optimizer)
    modelo = Model(Gurobi.Optimizer)
    #
    #Área plantada na origem e, na safra s e no período t
    @variable(modelo, P[e in 1:origem, s in 1:safra, t in T] >= 0)
    #Milho enviada da origem e para o silo j no período t
    @variable(modelo, X[e in 1:origem, s in 1:safra, j in 1:n, t in T; AlinhaO[e,j] > 0] >= 0)
    #Milho enviada da origem e para o silo j no período t
    @variable(modelo, W[e in 1:origem, j in 1:n, t in T; AlinhaO[e,j] > 0] >= 0)
    #Fluxos de milho do silo j ao vértice k no período t
    @variable(modelo, Y[j in setdiff(1:n,1:origem), k in 1:n, t in T; A[j,k] > 0] >= 0)
    #Capacidade extra no silo j no período t
    @variable(modelo, C[j in Silos, t in T; sum(A[:,j]) > 0] >= 0)
    #Estoque de milho no silo j no período t
    @variable(modelo, Inv[j in Silos, t in T; sum(A[:,j]) > 0] >= 0)
    #importação de milho para o silo j, destinado a cliente k no período t
    @variable(modelo, S[j in origem+silos+rodo+ferro+hidro+1:origem+silos+rodo+ferro+hidro+portos,k in D_i, t in T;c[j,k] < dist_max_imp] >= 0)
    #@variable(modelo, S[j in Silos, t in T; sum(A[:,j]) > 0] >= 0)
    @variable(modelo, R[k in 1:n, l in 1:n, t in T; Intermodais[k,l] > 0], Bin)
    @variable(modelo, z1)
    @variable(modelo, z2)
    #
    @variable(modelo, v >=0)
    @variable(modelo, CP >=0) #Custo de plantio
    @variable(modelo, CES >=0) #Custo de secagem no silo
    @variable(modelo, CCE >=0) #Custo de capacidade extra
    @variable(modelo, CE >=0) #Custo de estoque
    @variable(modelo, CIN >=0) #Custo de importação
    @variable(modelo, CESi >=0) #Custo de transporte do estado para o silo (rodo)
    @variable(modelo, CRR >=0) #Custo de transporte do entre nós rodoviários
    @variable(modelo, CFF >=0) #Custo de transporte do entre nós ferroviários
    @variable(modelo, CHH >=0) #Custo de transporte do entre nós hidroviários
    @variable(modelo, CHE >=0) #Custo de transporte do entre o porto e o destino externo
    @variable(modelo, CTM >=0) #Custo de transbordo intermodais
    @variable(modelo, CICMS >=0) #Custo de transbordo do entre modais
    @variable(modelo, Circ_estado_silo[e in 1:estados,elinha in 1:estados,t in T] >=0) #Circulação entre o estado e e o silos no estado elinha
    @variable(modelo, Circ_silo_destino[e in 1:estados,elinha in 1:estados,t in T] >=0) #Circulação entre os silos do estado e nós no estado elinha
    @variable(modelo, Circ_exp_destino[e in 1:estados,elinha in 1:estados,t in T] >=0) #Circulação entre a quantidade exportada e o destino
    #
    @variable(modelo, trem[j in origem+silos+rodo+1:origem+silos+rodo+ferro,k in origem+silos+rodo+1:origem+silos+rodo+ferro,t in T;A[j,k] >0], Bin)
    @variable(modelo, navio[j in origem+silos+rodo+ferro+1:origem+silos+rodo+ferro+hidro,k in origem+silos+rodo+ferro+1:origem+silos+rodo+ferro+hidro,t in T;A[j,k] >0], Bin)
    #
    @variable(modelo,Vol_porto[k in origem+silos+rodo+ferro+hidro+1:origem+silos+rodo+ferro+hidro+portos, t ∈ T] >=0)
    #

    @objective(modelo,Min,z1 - (1e-4)*v/(z2max-z2min)
    )

    @constraint(
    modelo, z2 + v == epsilon
    )

    @constraint(
    modelo,[(j,k,t) ∈ eachindex(trem)],
    Cap_min_trem*trem[j,k,t] <= Y[j,k,t]
    )

    @constraint(
    modelo,[(j,k,t) ∈ eachindex(trem)],
    Cap_max_trem*trem[j,k,t] >= Y[j,k,t]
    )

    @constraint(
    modelo,[(j,k,t) ∈ eachindex(navio)],
    Cap_min_navio*navio[j,k,t] <= Y[j,k,t]
    )

    @constraint(
    modelo,[(j,k,t) ∈ eachindex(navio)],
    Cap_max_navio*navio[j,k,t] >= Y[j,k,t]
    )

    @constraint(
    modelo,co_est_silo[e in 1:estados, elinha in 1:estados, t in T],
    Circ_estado_silo[e,elinha,t] == sum(W[j,k,t] for j in J[e] for k in J[elinha] if A[j,k] >0 && j<=origem && k >= origem+1 && k<=origem+silos )
    )

    @constraint(
    modelo,co_silo_dest[e in 1:estados, elinha in setdiff(1:estados,e), t in T],
    Circ_silo_destino[e,elinha,t] == sum(Y[j,k,t] for j in J[e]
    for k in J[elinha] if A[j,k] > 0 && j>=origem+1 &&  c[j,k] > 20)
    )

    @constraint(
    modelo,[e in 1:estados, elinha in 1:estados, t in T],
    Circ_exp_destino[e,elinha,t] == sum(S[j,k,t]
    for j in intersect(J[e],origem+silos+rodo+ferro+hidro+1:origem+silos+rodo+ferro+hidro+portos)
    for k in intersect(J[elinha],origem+silos+rodo+ferro+hidro+portos+1:origem+silos+rodo+ferro+hidro+portos+estados) if c[j,k] < dist_max_imp)
    )

    @constraint(
    modelo,
    z1 == CP+CES+CCE+CE+CIN+CESi+CRR+CFF+CHH+CHE+CTM+CICMS
    )

    @constraint(modelo,
    CP == sum(γ1[e,s,t]*P[e,s,t] for e in 1:origem for s in 1:safra for t in T)
    )

    @constraint(modelo,
    CES == sum(γ2[j,t]*W[e,j,t] for (e,j,t) in eachindex(W))
    )

    @constraint(modelo,
    CCE == sum(γ3[j,t]*C[j,t] for (j,t) in eachindex(C))
    )

    @constraint(modelo,
    CE == sum(γ4[j,t]*Inv[j,t] for (j,t) in eachindex(Inv))
    )

    @constraint(modelo,
    CIN == sum((γ5[j,k,t]+frete_rodo*c[j,k])*S[j,k,t] for j in origem+silos+rodo+ferro+hidro+1:origem+silos+rodo+ferro+hidro+portos for k in D_i for t in T if c[j,k] < dist_max_imp)
    )

    @constraint(modelo,
    CESi == sum((frete_rodo*c[e,j])*X[e,s,j,t] for (e,s,j,t) in eachindex(X))
    )

    @constraint(modelo,
    CRR == sum(frete_rodo*c[j,k]*Y[j,k,t] for (j,k,t) in eachindex(Y) if j>=origem+1 && j <= origem+silos && k>=origem+silos+1 && k<=origem+silos+rodo)+
    sum(frete_rodo*c[j,k]*Y[j,k,t] for (j,k,t) in eachindex(Y) if j>=origem+silos+1 && j <= origem+silos+rodo && k>=origem+silos+1 && k <= origem+silos+rodo)+
    sum(frete_rodo*c[j,k]*Y[j,k,t] for (j,k,t) in eachindex(R) if j>=origem+silos+1 && j <= origem+silos+rodo)+
    sum(frete_rodo*c[j,k]*Y[j,k,t] for (j,k,t) in eachindex(R) if j>=origem+silos+rodo+1 && j<=origem+silos+rodo+ferro)+
    sum(frete_rodo*c[j,k]*Y[j,k,t] for (j,k,t) in eachindex(R) if j>=origem+silos+rodo+ferro+1 && j<=origem+silos+rodo+ferro+hidro)+
    sum(frete_rodo*c[j,k]*Y[j,k,t] for (j,k,t) in eachindex(Y) if j>=origem+silos+1 && j<=origem+silos+rodo && k>=origem+silos+rodo+ferro+hidro+1 && j<=origem+silos+rodo+ferro+hidro+portos)+
    sum(frete_rodo*c[j,k]*Y[j,k,t] for (j,k,t) in eachindex(Y) if j>=origem+silos+1 && j<=origem+silos+rodo && k>=origem+silos+rodo+ferro+hidro+portos+1 && k<=origem+silos+rodo+ferro+hidro+portos+dest_in)
    )

    @constraint(modelo,
    CFF == sum((frete_ferro*c[j,k])*Y[j,k,t] for (j,k,t) in eachindex(Y) if j>=origem+silos+rodo+1 && j <= origem+silos+rodo+ferro && k>=origem+silos+rodo+1 && k <= origem+silos+rodo+ferro)
    )

    @constraint(modelo,
    CHH == sum((frete_hidro*c[j,k])*Y[j,k,t] for (j,k,t) in eachindex(Y) if j>=origem+silos+rodo+ferro+1 && j <= origem+silos+rodo+ferro+hidro && k>=origem+silos+rodo+ferro+1 && k <= origem+silos+rodo+ferro+hidro)
    )

    @constraint(modelo,
    CHE == sum((frete_hidro_ex*c[j,k])*Y[j,k,t] for (j,k,t) in eachindex(Y) if j>=origem+silos+rodo+ferro+hidro+1 && j <= origem+silos+rodo+ferro+hidro+portos && k >= origem+silos+rodo+ferro+hidro+portos+dest_in+1)
    )

    @constraint(modelo,
    CTM == sum(cT[j,k]*Y[j,k,t] for (j,k,t) in eachindex(R) if j>=origem+silos+1 && j<=origem+silos+rodo)+
    sum(cT[j,k]*Y[j,k,t] for (j,k,t) in eachindex(R) if j>=origem+silos+rodo+1 && j<=origem+silos+rodo+ferro)+
    sum(cT[j,k]*Y[j,k,t] for (j,k,t) in eachindex(R) if j>=origem+silos+rodo+ferro+1 && j<=origem+silos+rodo+ferro+hidro)
    )

    @constraint(modelo,
    CICMS == sum(Custo_ICMS[e,elinha]*(Circ_estado_silo[e,elinha,t] + Circ_silo_destino[e,elinha,t] + Circ_exp_destino[e,elinha,t]) for e in 1:estados for elinha in 1:estados for t in T)
    )


    @constraint(
    modelo,
    z2 == sum(μ[e,j]*X[e,s,j,t] for (e,s,j,t) in eachindex(X)) +
    sum(μ[j,k]*Y[j,k,t] for (j,k,t) in eachindex(Y)) +
    sum(μ[j,k]*S[j,k,t] for j in origem+silos+rodo+ferro+hidro+1:origem+silos+rodo+ferro+hidro+portos,k in D_i, t in T if c[j,k] < dist_max_imp)
    - sum(λ[e]*P[e,s,t] for e in 1:origem for s in 1:safra for t in T)
    )


    @constraint(
    modelo,[e in 1:origem, t in T], sum(α[e,s,t]*P[e,s,t] for s in 1:safra) ==
    sum(W[ee,j,tt] for (ee,j,tt) in eachindex(W) if ee==e && tt==t )
    )

    @constraint(
    modelo,[(e,j,t) ∈ eachindex(W)],
    W[e,j,t] == sum(X[ee,s,jj,tt] for (ee,s,jj,tt) ∈ eachindex(X) if ee==e && jj==j && tt==t)
    )

    @constraint(
    modelo,[e in 1:origem, s in 1:safra, t in T],
    α[e,s,t]*P[e,s,t] == sum(X[ee,ss,j,tt] for (ee,ss,j,tt) ∈ eachindex(X) if ee==e && ss==s && tt==t)
    )

    @constraint(
    modelo,[j in Silos],
    Inv[j,1] == I0[j] + (1-perda)*(sum(W[e,jj,t] for (e,jj,t) in eachindex(W) if jj==j && t==1))
    - sum(Y[j,k,t] for (jj,k,t) in eachindex(Y) if jj==j && t==1)
    )

    @constraint(
    modelo,[j in Silos, t in setdiff(T,1)],
    Inv[j,t] == Inv[j,t-1] + (1-perda)*(sum(W[e,jj,tt] for (e,jj,tt) in eachindex(W) if jj==j && tt==t))
    - sum(Y[jj,k,tt] for (jj,k,tt) in eachindex(Y) if jj==j && tt==t )
    )

    @constraint(
    modelo,[j in Silos],
    Inv[j,maximum(T)] == 0
    )

    @constraint(
    modelo,[e in 1:origem, s in 1:safra, t in T], P[e,s,t] <= β[e,s,t]
    )


    @constraint(
    modelo,[j in Silos, t in T], sum(W[e,jj,tt] for (e,jj,tt) ∈ eachindex(W) if jj==j && tt==t) <= δ[j,t] + C[j,t]
    )


    @constraint(
    modelo,[l in setdiff(V,union(D_i,D_e)), t in T],
    sum(Y[j,ll,tt] for (j,ll,tt) in eachindex(Y) if ll==l && tt==t) == sum(Y[ll,k,tt] for (ll,k,tt) in eachindex(Y) if ll==l && tt==t )
    )

    @constraint(
    modelo,[(j,k,t) ∈ eachindex(Y); k < minimum(D_e)], Y[j,k,t] <= ε[j,k,t]
    )

    @constraint(
    modelo,[k in origem+silos+rodo+ferro+hidro+1:origem+silos+rodo+ferro+hidro+portos, t in T],
    sum(Y[j,kk,tt] for (j,kk,tt) in eachindex(Y) if kk==k && tt==t) +
    sum(S[k,j,t] for j ∈ D_i if c[k,j] < dist_max_imp) <= Cap_porto[k]
    )

    @constraint(
    modelo,[k in origem+silos+rodo+ferro+hidro+1:origem+silos+rodo+ferro+hidro+portos, t in T],
    Vol_porto[k,t] == sum(Y[j,kk,tt] for (j,kk,tt) in eachindex(Y) if kk==k && tt==t) +
    sum(S[k,j,t] for j ∈ D_i if c[k,j] < dist_max_imp)
    )


    @constraint(
    modelo, [k in D_e,t in T],
    sum(Y[j,kk,tt] for (j,kk,tt) in eachindex(Y) if kk==k && tt==t ) == σ[k,t]
    )

    @constraint(
    modelo, [k in D_i,t in T],
    sum(Y[j,kk,tt] for (j,kk,tt) in eachindex(Y) if kk==k && tt==t) +
    sum(S[j,k,t] for j in origem+silos+rodo+ferro+hidro+1:origem+silos+rodo+ferro+hidro+portos if c[j,k] < dist_max_imp) == σ[k,t]
    )


    @constraint(
    modelo, [(k,ℓ,t) in eachindex(R)], Y[k,ℓ,t] <= u[k,ℓ]*R[k,ℓ,t]
    )


    @constraint(
    modelo, [(k,ℓ,t) in eachindex(R)], l[k,ℓ]*R[k,ℓ,t] <= Y[k,ℓ,t]
    )

    optimize!(modelo)

    Obj1 = value(z1)
    Obj2 = value(z2)
    return (Obj1,Obj2)
end

N=21
Obj1=[]
Obj2=[]
for i in 1:N
    epsilon = z2min + i*(z2max-z2min)/N
    (O1,O2) = E_restrito(epsilon)
    push!(Obj1,O1)
    push!(Obj2,O2)
end
Obj1=[z1max;Obj1]
Obj2=[z2min;Obj2]

plot(Obj1,Obj2,
Axes(key = :off,xtics = 3.0e10:0.4e10:4.8e10),
linewidth="1",
linecolor=:red,
pointtype="fsquare",
plotstyle="linespoints")
